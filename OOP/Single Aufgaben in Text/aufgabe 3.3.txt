/** Die iterative Berechnung von pi wird durch die Formel (Math.sqrt(12) * Math.pow(- 1.0 / 3.0 , k) * Math.pow(2 * k + 1 , -1)) + pn-1 berechnet.
@param k zählt ein Einerschritten hoch bis n erreicht ist um vom kleinsten Element p0 durch die Formel auf pn berechnet zu werden
@param n gibt den Grad der Iteration an
@param pi gibt den Startwert der iteration(also p0) an, da es den Grad -1 nicht gibt
@return gibt das Ergebniss der Formel mit Grad n aus 
**/

double piIterative (int n) {
	int k = 1; 
	double pi = Math.sqrt(12);
	if (n == 0) {
		return pi;
	}
	while (k <= n) {
		pi = pi + (Math.sqrt(12) * Math.pow(- 1.0 / 3.0 , k) * Math.pow(2 * k + 1 , -1));
		k ++;
	}
	return pi;
}

//Tests
piIterative (0);
piIterative (10);
piIterative (20);

/** Die rekursive Berechnung wurd druch die Formel (Math.sqrt(12.0) * (Math.pow( -1.0/3.0,n) / ((2 * n) + 1))) + den direkten Vorgänger von pn gemacht.
@param n gibt den Grad der Rekursion an
@return Berechnet das Ergebniss der Rekursion mit Grad n
**/
double piRecursive (int n) { 
	if (n == 0) {
		return Math.sqrt(12.0);
		}
	else {
		return (Math.sqrt(12.0) * (Math.pow( -1.0/3.0,n) / ((2 * n) + 1))) + piRecursive(n - 1);
	}
}

//Tests
piRecursive (0);
piRecursive (10);
piRecursive (20);