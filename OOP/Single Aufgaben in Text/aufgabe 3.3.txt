/** Die iterative Berechnung von pi wird durch die Formel (Math.sqrt(12.0) * (Math.pow(-1.0 / 3.0,n) / ((2 * n) + 1))) + pn-1 berechnet.
 @param n gibt den Grad der Iteration an und wird in jedem Schritt um eins reduziert
 @param pi gibt den Startwert der iteration
 @return gibt das Ergebnis der Formel mit Grad n aus
 **/

    double piIterative(int n) {
        double pi = 0.0;
        while (n >= 0) {
            pi = pi + (Math.sqrt(12.0) * (Math.pow(-1.0 / 3.0, n) / ((2 * n) + 1)));
            n--;
        }
        return pi;
    }

//Tests
    piIterative(0);
    piIterative(10);
    piIterative(20);

    /** Die rekursive Berechnung wurde durch die Formel (Math.sqrt(12.0) * (Math.pow(-1.0 / 3.0,n) / ((2 * n) + 1))) + den direkten Vorg√§nger von pn gemacht.
     @param n gibt den Grad der Rekursion an
     @return Berechnet das Ergebnis der Rekursion mit Grad n
     **/
    double piRecursive(int n) {
        if (n == 0) {
            return Math.sqrt(12.0);
        } else {
            return (Math.sqrt(12.0) * (Math.pow(-1.0 / 3.0, n) / ((2 * n) + 1))) + piRecursive(n - 1);
        }
    }

//Tests
    piRecursive(0);
    piRecursive(10);
    piRecursive(20);