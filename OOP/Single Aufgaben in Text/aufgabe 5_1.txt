    static void testAll() {
        float minimumTest = -0.5f; 
        float minimumTestResult = getMinimum(new float[]{-0.5f, 0.f, 0.37f, 0.5f}); 
        if (minimumTest == (minimumTestResult)) { 
            System.out.println("Minimum Test passed"); 
        } else {
            System.out.println("Minimum Test failed"); 
            System.out.println("Expected:" + minimumTest); 
            System.out.println("Actual:" + minimumTestResult); 
        }
        float maximumTest = 0.5f;
        float maximumTestResult = getMaximum(new float[]{-0.5f, 0.f, 0.37f, 0.5f});
        if (maximumTest == (maximumTestResult)) {
            System.out.println("Maximum Test passed");
        } else {
            System.out.println("Maximum Test failed");
            System.out.println("Expected:" + maximumTest);
            System.out.println("Actual:" + maximumTestResult);
        }
        float averageTest = 0.0925f;
        float averageTestResult = calculateAverage(new float[]{-0.5f, 0.f, 0.37f, 0.5f});
        if (averageTest == (averageTestResult)) {
            System.out.println("Average test passed");
        } else {
            System.out.println("Average test failed");
            System.out.println("Expected:" + averageTest);
            System.out.println("Actual:" + averageTestResult);
        }
        boolean sortedTest = true;
        boolean sortedTestResult = isSorted(new float[]{-0.5f, 0.f, 0.37f, 0.5f}, true);
        if (sortedTest == (sortedTestResult)) {
            System.out.println("Sorted test passed");
        } else {
            System.out.println("Sorted test failed");
            System.out.println("Expected:" + sortedTest);
            System.out.println("Actual:" + sortedTestResult);
        }
    }

        static float getMinimum(float[] numbers) {
            float lowestValue = Float.MAX_VALUE; //Das gibt und den größten Wert den float ausgeben kann, alles ist demnach kleiner als das; den schritt kann man theoretisch auch skippen, weil wir sowieso nur die Einträge im Array miteinander vergleichen. Wir brauchen aber sowieso so eine "SpeicherVariable" also might as well ;).
            for (int counter = 0; counter < numbers.length; counter++) {
                if (numbers[counter] < lowestValue) {
                    lowestValue = numbers[counter];
                }
            }
            return lowestValue;
        }

        static float getMaximum(float[] numbers) {
            float highestValue = numbers[0]; //So kann man das z.B. ohne Array fremde Werte machen.
            for (float number : numbers) {
                if (number > highestValue) {
                    highestValue = number;
                }
            }
            return highestValue;
        }

        static float calculateAverage(float[] numbers) {
            int counter = 0;
            float sum = 0.f;
            while (counter < numbers.length) { //berechnet einfach ne simple Summe über alle Einträge im Array.
                sum += numbers[counter];
                counter++;
            }
            return sum / numbers.length; //dann durch die Anzahl der Einträge teilen, macht den Durchschritt.
        }

        static boolean isSorted(float[] numbers, boolean ascending) {
            if (ascending == true) { //wenn die Zahlen aufsteigend sind (1,2,3)
                if (numbers[0] <= numbers[1]) { //ist 1 kleiner 2?
                    float[] newNumbers = new float[numbers.length - 1];//neuer Array der von der Länge eins kürzer is als der alte
                    System.arraycopy(numbers, 1, newNumbers, 0, newNumbers.length); //wird hier befüllt
                    if (newNumbers.length == 1) { //wenn der Array nur noch einen Eintrag hat, haben wir alle miteinander verglichen, ohne jemals nen Fehler zu bekommen
                        return true; //also stimmt es
                    }
                    return isSorted(newNumbers, ascending); //Rekursion ruft hier die Methode immer wieder mit dem um eins kürzerem Array auf
                } else {
                    return false; //wenn ein Fehler ist es Falsch
                }
            }
            if (ascending == false) { //wenn die Zahlen absteigend sind (3,2,1)
                if (numbers[0] >= numbers[1]) { //ist 3 größer 2?
                    float[] newNumbers = new float[numbers.length - 1]; //Hier unterscheidet sich gar nichts von oben
                    System.arraycopy(numbers, 1, newNumbers, 0, newNumbers.length);
                    if (newNumbers.length == 1) {
                        return true;
                    }
                    return isSorted(newNumbers, ascending);
                } else {
                    return false;
                }
            }
            return ascending;//pseudo return
        }
